@import "../../styles";

$transition-duration: 0.3s;
$transition-timing: ease-in-out;
$transition-props: $transition-duration $transition-timing;

//limit transition properties to avoid animating other properties coming form outside
$common-transitions: transform $transition-props, width $transition-props,
  height $transition-props, max-width $transition-props,
  max-height $transition-props;

@include theme(a-drawer) using ($theme) {
  background: map-deep-get($theme, "drawer", "bg");
}

.a-drawer {
  overflow: hidden;

  box-shadow: 0px 4px 12px rgba(0, 0, 0, 0.12);

  transform: translateX(100%);

  @include transition(
    $common-transitions,
    visibility 0s // immediate visibility change
  );

  &--vertical {
    height: 100vh;
    width: 400px;
  }

  &--horizontal {
    height: 400px;
    width: 100vw;
  }

  &--slim {
    &.a-drawer--horizontal {
      height: 50px;
    }

    &.a-drawer--vertical {
      width: 65px;
    }
  }

  &--close-button {
    position: absolute;
    top: 14px;
    right: 10px;
  }

  /**
    * When the drawer should render over the entire
    * page
    */
  &--fixed {
    position: fixed;
    z-index: 1;
  }

  /**
    * In situations where the Drawer should _not_ fill
    * up the entire viewport
    * 
    * e.g., underneath a nav bar
    */
  &--absolute {
    position: absolute;
    z-index: 1;

    &.a-drawer--horizontal {
      width: 100%;
    }

    &.a-drawer--vertical {
      height: 100%;
    }
  }

  /**
    * In situations where the Drawer should not fill
    * up the entire viewport _and_ it should reposition
    * its surrounding content
    
    * e.g., a permanent sidebar where we don't
    * want the sidebar covering the main content
    */
  &--relative {
    position: relative;

    &.a-drawer--horizontal {
      width: 100%;
    }

    &.a-drawer--vertical {
      height: 100%;
    }
  }

  &--left:not(.a-drawer--relative) {
    top: 0;
    left: 0;
  }

  &--right:not(.a-drawer--relative) {
    top: 0;
    right: 0;
  }

  &--bottom:not(.a-drawer--relative) {
    bottom: 0;
    left: 0;
  }
}

.slide-in-from-right {
  animation-name: slideInFromRight;
  animation-delay: 0s;
  animation-duration: 0.3s;
  animation-timing-function: ease-in-out;
  animation-fill-mode: forwards;
}

.slide-out-to-right {
  animation-name: slideOutToRight;
  animation-delay: 0s;
  animation-duration: 0.3s;
  animation-timing-function: ease-in-out;
  animation-fill-mode: forwards;
}

.slide-in-from-left {
  animation-name: slideInFromLeft;
  animation-delay: 0s;
  animation-duration: 0.3s;
  animation-timing-function: ease-in-out;
  animation-fill-mode: forwards;
}

.slide-out-to-left {
  animation-name: slideOutToLeft;
  animation-delay: 0s;
  animation-duration: 0.3s;
  animation-timing-function: ease-in-out;
  animation-fill-mode: forwards;
}

.slide-in-from-bottom {
  animation-name: slideInFromBottom;
  animation-delay: 0s;
  animation-duration: 0.3s;
  animation-timing-function: ease-in-out;
  animation-fill-mode: forwards;
}

.slide-out-to-bottom {
  animation-name: slideOutToBottom;
  animation-delay: 0s;
  animation-duration: 0.3s;
  animation-timing-function: ease-in-out;
  animation-fill-mode: forwards;
}

@media (prefers-reduced-motion) {
  .a-drawer {
    transition: none;
  }
}

@keyframes slideInFromRight {
  0% {
    transform: translateX(100%);
  }
  100% {
    transform: translateX(0);
  }
}

@keyframes slideOutToRight {
  0% {
    transform: translateX(0);
  }
  100% {
    transform: translateX(100%);
  }
}

@keyframes slideInFromLeft {
  0% {
    transform: translateX(-100%);
  }
  100% {
    transform: translateX(0);
  }
}

@keyframes slideOutToLeft {
  0% {
    transform: translateX(0);
  }
  100% {
    transform: translateX(-100%);
  }
}

@keyframes slideInFromBottom {
  0% {
    transform: translateY(100%);
  }
  100% {
    transform: translateY(0);
  }
}

@keyframes slideOutToBottom {
  0% {
    transform: translateY(0);
  }
  100% {
    transform: translateY(100%);
  }
}
