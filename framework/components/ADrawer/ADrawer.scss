@import "../../styles";

$transition-duration: 0.3s;
$transition-timing: ease-in-out;
$transition-props: $transition-duration $transition-timing;

$drawer-width-default: 400px;
$drawer-width-lg: 576px;
$drawer-width-xl: 768px;

//limit transition properties to avoid animating other properties coming form outside
$common-transitions: transform $transition-props, width $transition-props,
  height $transition-props, max-width $transition-props,
  max-height $transition-props;

.a-drawer {
  overflow: hidden;
  box-shadow: 0px 4px 12px rgba(0, 0, 0, 0.12);
  background: var(--control-bg-weak-default);

  &--modal {
    top: unset;
    left: unset;

    > span {
      height: 100%;

      > div {
        display: flex;
        flex-direction: column;
        height: 100%;
      }
    }
  }

  &--transitions {
    @include transition(
      $common-transitions,
      visibility 0s // immediate visibility change
    );
  }

  &--hidden {
    box-shadow: none;

    &.a-drawer--left {
      transform: translateX(-100%);
    }

    &.a-drawer--right {
      transform: translateX(100%);
    }

    &.a-drawer--bottom {
      transform: translateY(100%);
    }
  }

  &--show {
    transform: translateX(0);
  }

  &--vertical {
    height: 100vh;
    width: $drawer-width-default;
  }

  &--horizontal {
    height: 400px;
    width: 100vw;
  }

  &--slim {
    &.a-drawer--horizontal {
      height: 50px;
    }

    &.a-drawer--vertical {
      width: 65px;
    }
  }

  &--close-button {
    position: absolute;
    top: 14px;
    right: 10px;
  }

  /**
    * When the drawer should render over the entire
    * page
    */
  &--fixed {
    position: fixed;
    z-index: 100;
  }

  /**
    * In situations where the Drawer should _not_ fill
    * up the entire viewport
    *
    * e.g., underneath a nav bar
    */
  &--absolute {
    position: absolute;
    z-index: 100;

    &.a-drawer--horizontal {
      width: 100%;
    }

    &.a-drawer--vertical {
      height: 100%;
    }
  }

  /**
    * In situations where the Drawer should not fill
    * up the entire viewport _and_ it should reposition
    * its surrounding content

    * e.g., a permanent sidebar where we don't
    * want the sidebar covering the main content
    */
  &--relative {
    position: relative;

    &.a-drawer--horizontal {
      width: 100%;
    }

    &.a-drawer--vertical {
      height: 100%;
    }
  }

  &--left:not(.a-drawer--relative) {
    top: 0;
    left: 0;
    right: unset;
  }

  &--right:not(.a-drawer--relative) {
    top: 0;
    right: 0;
    left: unset;
  }

  &--bottom:not(.a-drawer--relative) {
    bottom: 0;
    left: 0;
    top: unset;
  }

  &--responsive-width {
    width: $drawer-width-default;

    @media screen and (min-width: map-get($grid-breakpoints, "lg")) {
      width: $drawer-width-lg;
    }

    @media screen and (min-width: map-get($grid-breakpoints, "xl")) {
      width: $drawer-width-xl;
    }
  }
}

@media (prefers-reduced-motion) {
  .a-drawer {
    transition: none;
  }
}
